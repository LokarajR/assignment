1. Implementation of Structures (Define a structure named Friends with members:
name, pet name, phone number, and a nested structure named Type with members:
Type of friend (School, College or Area friend), name of common friends and places
visited together. Write a C program to input atleast 3 friends data and display the
details in proper time format.)



#include <stdio.h>

struct Type {
    char typeOfFriend[20];
    char commonFriends[100];
    int placesVisited;
};

struct Friends {
    char name[50];
    char petName[50];
    char phoneNumber[15];
    struct Type friendType;
};

void inputFriendDetails(struct Friends *friend) {
    printf("Enter Friend Name: ");
    scanf(" %[^\n]", friend->name);  

    printf("Enter Pet Name: ");
    scanf(" %[^\n]", friend->petName);

    printf("Enter Phone Number: ");
    scanf(" %[^\n]", friend->phoneNumber);

    printf("Enter Type of Friend (School, College, or Area): ");
    scanf(" %[^\n]", friend->friendType.typeOfFriend);

    printf("Enter Name of Common Friends: ");
    scanf(" %[^\n]", friend->friendType.commonFriends);

    printf("Enter Number of Places Visited Together: ");
    scanf("%d", &friend->friendType.placesVisited);
}

void displayFriendDetails(struct Friends friend, int index) {
    printf("%-3d %-15s %-10s %-15s %-10s %-20s %-5d\n", 
           index, friend.name, friend.petName, friend.phoneNumber, 
           friend.friendType.typeOfFriend, friend.friendType.commonFriends, 
           friend.friendType.placesVisited);
}

int main() {
    int numFriends;
    printf("Enter the number of friends to add: ");
    scanf("%d", &numFriends);
    getchar();  

    struct Friends friends[numFriends];

    for (int i = 0; i < numFriends; i++) {
        printf("\nFriend %d:\n", i + 1);
        inputFriendDetails(&friends[i]);
    }

    printf("\nFriends List:\n");
    printf("S.No. Name            Pet Name   Phone Number   Type of Friend   Name of common friends       No. of places visited together\n");
    printf("----------------------------------------------------------------------------------------------------------------------------\n");

    for (int i = 0; i < numFriends; i++) {
        displayFriendDetails(friends[i], i + 1);
    }

    return 0;

}









2. Implementation of Structures using Pointers (Create a structure named Product to
store details of the product like name, ID and price. Write a C program to input details
for at least 5 products, find the Total cost of all products, the most expensive and the
lowest priced product, and display their information.)



#include <stdio.h>
#include <string.h>

struct Product {
    char name[50];
    char id[10];
    float price;
};

int main() {
    int n, i;
    float totalCost = 0;
    struct Product products[5], *expensive, *cheap;

    printf("Enter the number of products: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter details for product %d:\n", i + 1);
        printf("Product Name: ");
        scanf("%s", products[i].name);
        printf("Product ID: ");
        scanf("%s", products[i].id);
        printf("Price: ");
        scanf("%f", &products[i].price);

        totalCost += products[i].price;

        if (i == 0) {
            expensive = &products[i];
            cheap = &products[i];
        }

        if (products[i].price > expensive->price) {
            expensive = &products[i];
        }

        if (products[i].price < cheap->price) {
            cheap = &products[i];
        }
    }

    printf("\nProduct Details:\n");
    for (i = 0; i < n; i++) {
        printf("Product Name: %s, Product ID: %s, Price: %.2f\n", products[i].name, products[i].id, products[i].price);
    }

    printf("\nMost Expensive Product: %s, Product ID: %s, Price: %.2f\n", expensive->name, expensive->id, expensive->price);
    printf("Least Expensive Product: %s, Product ID: %s, Price: %.2f\n", cheap->name, cheap->id, cheap->price);

    printf("Total Cost of All Products: %.2f\n", totalCost);

    return 0;
}
